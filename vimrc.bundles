" Environment {

    " Basics {
        set nocompatible        " Must be first line
        set background=dark     " Assume a dark background
    " }

    " Setup Bundle Support {
        " The next three lines ensure that the ~/.vim/bundle/ system works
        filetype off
        set rtp+=~/.vim/bundle/vundle
        call vundle#rc()
    " }

" }

" Bundles {

    " Deps {
        Bundle 'gmarik/vundle'
        Bundle 'MarcWeber/vim-addon-mw-utils'
        Bundle 'tomtom/tlib_vim'
        Bundle 'tpope/vim-dispatch'
        Bundle 'rking/ag.vim'
        let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
    " }

    " Use local bundles config if available {
        if filereadable(expand("~/.vimrc.bundles.local"))
            source ~/.vimrc.bundles.local
        endif
    " }

    " Use fork bundles config if available {
        if filereadable(expand("~/.vimrc.bundles.fork"))
            source ~/.vimrc.bundles.fork
        endif
    " }

    " In your .vimrc.bundles.local file
    " list only the plugin groups you will use
    if !exists('g:spf13_bundle_groups')
        let g:spf13_bundle_groups=['general', 'snipmate', 'programming', 'ruby', 'go', 'javascript', 'html', 'misc', 'scala', 'clojure', 'php']
    endif

    " To override all the included bundles, add the following to your
    " .vimrc.bundles.local file:
    "   let g:override_spf13_bundles = 1
    if !exists("g:override_spf13_bundles")

    " General {
        if count(g:spf13_bundle_groups, 'general')
            Bundle 'scrooloose/nerdtree'
            Bundle 'altercation/vim-colors-solarized'
            Bundle '29decibel/codeschool-vim-theme'
            " Bundle 'spf13/vim-colors'
            Bundle 'tpope/vim-surround'
            Bundle 'tpope/vim-endwise'
            " Bundle 'spf13/vim-autoclose'
            Bundle 'kien/ctrlp.vim'
            Bundle 'terryma/vim-multiple-cursors'
            " Bundle 'vim-scripts/sessionman.vim'
            Bundle 'matchit.zip'
            Bundle 'Lokaltog/vim-powerline'

            Bundle 'Lokaltog/vim-easymotion'
            " Bundle 'godlygeek/csapprox'
            " Bundle 'jistr/vim-nerdtree-tabs'
            " Bundle 'flazz/vim-colorschemes'
            Bundle 'mbbill/undotree'
            Bundle 'myusuf3/numbers.vim'
            " Bundle 'nathanaelkane/vim-indent-guides'
            " if !exists('g:spf13_no_views')
            "     Bundle 'vim-scripts/restore_view.vim'
            " endif
            Bundle 'airblade/vim-gitgutter'
            Bundle 'tpope/vim-abolish.git'
        endif
    " }

    " General Programming {
        if count(g:spf13_bundle_groups, 'programming')
            " Pick one of the checksyntax, jslint, or syntastic
            Bundle 'tpope/vim-fugitive'
            " Bundle 'mattn/webapi-vim'
            " Bundle 'mattn/gist-vim'
            " Bundle 'scrooloose/nerdcommenter'
            Bundle 'tpope/vim-surround'
            Bundle 'tpope/vim-commentary'
            Bundle 'godlygeek/tabular'
            " if executable('ctags')
            "     Bundle 'majutsushi/tagbar'
            " endif
        endif
    " }

    " Snippets & AutoComplete {
        if count(g:spf13_bundle_groups, 'snipmate')
            Bundle 'garbas/vim-snipmate'
            Bundle 'honza/vim-snippets'
            " Source support_function.vim to support vim-snippets.
            if filereadable(expand("~/.vim/bundle/vim-snippets/snippets/support_functions.vim"))
                source ~/.vim/bundle/vim-snippets/snippets/support_functions.vim
            endif
        elseif count(g:spf13_bundle_groups, 'neocomplcache')
            Bundle 'Shougo/neocomplcache'
            Bundle 'Shougo/neosnippet'
            Bundle 'honza/vim-snippets'
        elseif count(g:spf13_bundle_groups, 'neocomplete')
            Bundle 'Shougo/neocomplete.vim.git'
            Bundle 'Shougo/neosnippet'
            Bundle 'honza/vim-snippets'
        endif
    " }

    " Python {
        if count(g:spf13_bundle_groups, 'python')
            " Pick either python-mode or pyflakes & pydoc
            Bundle 'klen/python-mode'
            Bundle 'python.vim'
            Bundle 'python_match.vim'
            Bundle 'pythoncomplete'
        endif
    " }

    " Javascript {
        if count(g:spf13_bundle_groups, 'javascript')
            Bundle 'elzr/vim-json'
            Bundle 'groenewege/vim-less'

            Bundle 'pangloss/vim-javascript'
            let g:javascript_conceal = 1

            Bundle 'briancollins/vim-jst'
            Bundle 'kchmck/vim-coffee-script'

            Bundle 'Shutnik/jshint2.vim'
            let jshint2_read = 1
            let jshint2_save = 1
            let jshint2_confirm = 0
        endif
    " }

    " Java {
        if count(g:spf13_bundle_groups, 'scala')
            Bundle 'derekwyatt/vim-scala'
            Bundle 'derekwyatt/vim-sbt'
        endif
    " }

    " Clojure {
        if count(g:spf13_bundle_groups, 'clojure')
            Bundle 'guns/vim-clojure-static'
            Bundle 'tpope/vim-fireplace'
            Bundle 'tpope/vim-classpath'
        endif
    " }

    " Haskell {
        if count(g:spf13_bundle_groups, 'haskell')
            Bundle 'travitch/hasksyn'
            Bundle 'dag/vim2hs'
            Bundle 'Twinside/vim-haskellConceal'
            Bundle 'lukerandall/haskellmode-vim'
            Bundle 'ujihisa/neco-ghc'
            Bundle 'eagletmt/ghcmod-vim'
            Bundle 'Shougo/vimproc'
            Bundle 'adinapoli/cumino'
            Bundle 'bitc/vim-hdevtools'
        endif
    " }

    " HTML {
        if count(g:spf13_bundle_groups, 'html')
            Bundle 'amirh/HTML-AutoCloseTag'
            Bundle 'hail2u/vim-css3-syntax'
            Bundle 'tpope/vim-haml'
            Bundle 'slim-template/vim-slim'
            Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
            Bundle 'othree/html5.vim'
            Bundle 'mattn/emmet-vim'
        endif
    " }

    " Ruby {
        if count(g:spf13_bundle_groups, 'ruby')
            Bundle 'hallison/vim-ruby-sinatra'
            Bundle 'vim-ruby/vim-ruby'
            Bundle 'sunaku/vim-ruby-minitest'
            let g:rubycomplete_buffer_loading = 1
            "let g:rubycomplete_classes_in_global = 1
            let g:rubycomplete_rails = 1

            Bundle "asux/vim-capybara"
            Bundle "thoughtbot/vim-rspec"

            Bundle 'tpope/vim-bundler'
            Bundle 'tpope/vim-rails'
        endif
    " }

    " Go Lang {
        if count(g:spf13_bundle_groups, 'go')
            Bundle 'jnwhiteh/vim-golang'
            Bundle 'spf13/vim-gocode'
        endif
    " }
    
    " PHP {
        if count(g:spf13_bundle_groups, 'php')
            Bundle 'StanAngeloff/php.vim'
        endif
    " }

    " Misc {
        if count(g:spf13_bundle_groups, 'misc')
            Bundle 'tpope/vim-markdown'
            " Bundle 'spf13/vim-preview'
            " Bundle 'tpope/vim-cucumber'
            " Bundle 'quentindecock/vim-cucumber-align-pipes'
            " Bundle 'Puppet-Syntax-Highlighting'
        endif
    " }

    endif

" }

" General {
    " set autowrite                  " automatically write a file when leaving a modified buffer
    set shortmess+=filmnrxoOtT      " Abbrev. of messages (avoids 'hit enter')
" }
